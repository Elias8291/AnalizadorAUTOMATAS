
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 19 16:31:04 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 19 16:31:04 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\007\000\002\002\010\000\002\015\012" +
    "\000\002\015\010\000\002\015\011\000\002\015\011\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\016\002\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\007\000\002\017" +
    "\002\000\002\004\012\000\002\020\002\000\002\004\010" +
    "\000\002\021\002\000\002\004\010\000\002\004\006\000" +
    "\002\004\006\000\002\004\005\000\002\022\002\000\002" +
    "\004\010\000\002\023\002\000\002\004\010\000\002\024" +
    "\002\000\002\004\012\000\002\025\002\000\002\004\011" +
    "\000\002\004\010\000\002\004\010\000\002\004\011\000" +
    "\002\004\011\000\002\004\005\000\002\026\002\000\002" +
    "\004\010\000\002\027\002\000\002\004\012\000\002\030" +
    "\002\000\002\004\010\000\002\006\011\000\002\013\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\006\000\002\013\007\000\002\007\015\000\002" +
    "\010\011\000\002\011\013\000\002\012\011\000\002\014" +
    "\012\000\002\014\011\000\002\005\005\000\002\005\004" +
    "\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\021\004\022\005\001\002\000\004\045" +
    "\301\001\002\000\004\021\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\045\011\001" +
    "\002\000\004\040\012\001\002\000\010\022\016\023\014" +
    "\041\013\001\002\000\004\002\uffff\001\002\000\004\045" +
    "\272\001\002\000\004\041\271\001\002\000\004\023\017" +
    "\001\002\000\004\045\020\001\002\000\004\036\021\001" +
    "\002\000\004\037\022\001\002\000\004\040\023\001\002" +
    "\000\024\006\036\007\025\011\033\012\032\013\026\016" +
    "\030\017\041\041\040\045\042\001\002\000\026\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\041\ufff1\045\ufff1\001\002\000\004\045\254\001\002" +
    "\000\004\036\242\001\002\000\026\006\uffee\007\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee\041\uffee" +
    "\045\uffee\001\002\000\004\036\234\001\002\000\026\006" +
    "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\041\ufff7\045\ufff7\001\002\000\004\045\215\001" +
    "\002\000\004\045\200\001\002\000\026\006\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\041" +
    "\ufff3\045\ufff3\001\002\000\026\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\041\ufff5\045" +
    "\ufff5\001\002\000\006\034\153\045\154\001\002\000\026" +
    "\006\036\007\025\011\033\012\032\013\026\015\135\016" +
    "\030\017\041\041\152\045\042\001\002\000\004\041\ufff9" +
    "\001\002\000\004\036\065\001\002\000\004\024\043\001" +
    "\002\000\010\045\046\046\044\047\045\001\002\000\006" +
    "\010\060\044\uffec\001\002\000\004\044\056\001\002\000" +
    "\010\025\051\026\050\044\047\001\002\000\026\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\041\uffe9\045\uffe9\001\002\000\004\045\054\001\002" +
    "\000\004\045\052\001\002\000\004\044\053\001\002\000" +
    "\026\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\041\uffe8\045\uffe8\001\002\000\004\044" +
    "\055\001\002\000\026\006\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\015\uffe7\016\uffe7\017\uffe7\041\uffe7\045\uffe7\001" +
    "\002\000\026\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\015\uffea\016\uffea\017\uffea\041\uffea\045\uffea\001\002\000" +
    "\004\044\064\001\002\000\004\046\061\001\002\000\004" +
    "\044\uffd6\001\002\000\004\044\063\001\002\000\026\006" +
    "\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\041\uffd5\045\uffd5\001\002\000\026\006\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\041\uffeb\045\uffeb\001\002\000\006\006\070\045\067\001" +
    "\002\000\004\037\126\001\002\000\004\024\120\001\002" +
    "\000\004\045\071\001\002\000\004\024\072\001\002\000" +
    "\004\046\073\001\002\000\004\044\074\001\002\000\006" +
    "\035\076\045\077\001\002\000\004\044\110\001\002\000" +
    "\006\037\uffc8\044\uffc8\001\002\000\004\032\100\001\002" +
    "\000\012\005\102\035\103\045\104\046\101\001\002\000" +
    "\006\037\uffc6\044\uffc6\001\002\000\006\005\105\045\106" +
    "\001\002\000\006\037\uffc7\044\uffc7\001\002\000\006\037" +
    "\uffc5\044\uffc5\001\002\000\006\037\uffc4\044\uffc4\001\002" +
    "\000\004\005\107\001\002\000\006\037\uffc3\044\uffc3\001" +
    "\002\000\006\034\113\045\112\001\002\000\004\037\uffbe" +
    "\001\002\000\006\033\115\034\116\001\002\000\004\045" +
    "\114\001\002\000\004\037\uffba\001\002\000\004\046\117" +
    "\001\002\000\004\037\uffbb\001\002\000\004\037\uffbc\001" +
    "\002\000\004\046\121\001\002\000\004\044\122\001\002" +
    "\000\006\035\076\045\077\001\002\000\004\044\124\001" +
    "\002\000\006\034\113\045\112\001\002\000\004\037\uffbd" +
    "\001\002\000\004\040\127\001\002\000\022\006\036\007" +
    "\025\011\033\012\032\013\026\016\030\017\041\045\042" +
    "\001\002\000\026\006\036\007\025\011\033\012\032\013" +
    "\026\015\135\016\030\017\041\041\137\045\042\001\002" +
    "\000\026\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\041\ufff2\045\ufff2\001\002\000\026" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016" +
    "\uffef\017\uffef\041\uffef\045\uffef\001\002\000\026\006\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\041\ufff8\045\ufff8\001\002\000\026\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\041" +
    "\ufff4\045\ufff4\001\002\000\004\040\142\001\002\000\026" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\041\ufff6\045\ufff6\001\002\000\026\006\uffbf" +
    "\007\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\041\uffbf\045\uffbf\001\002\000\004\015\135\001\002" +
    "\000\026\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\041\ufff0\045\ufff0\001\002\000\022" +
    "\006\036\007\025\011\033\012\032\013\026\016\030\017" +
    "\041\045\042\001\002\000\026\006\036\007\025\011\033" +
    "\012\032\013\026\015\135\016\030\017\041\041\144\045" +
    "\042\001\002\000\004\016\145\001\002\000\004\036\146" +
    "\001\002\000\006\035\076\045\077\001\002\000\004\037" +
    "\150\001\002\000\004\044\151\001\002\000\026\006\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\041\uffc0\045\uffc0\001\002\000\004\041\ufffc\001\002" +
    "\000\004\045\176\001\002\000\012\024\160\033\155\034" +
    "\157\044\156\001\002\000\004\046\174\001\002\000\026" +
    "\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016" +
    "\uffed\017\uffed\041\uffed\045\uffed\001\002\000\004\044\173" +
    "\001\002\000\006\046\161\047\162\001\002\000\006\010" +
    "\166\044\uffe3\001\002\000\004\044\uffe1\001\002\000\004" +
    "\044\164\001\002\000\026\006\uffe0\007\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\041\uffe0\045\uffe0" +
    "\001\002\000\004\044\172\001\002\000\004\046\167\001" +
    "\002\000\004\044\uffe5\001\002\000\004\044\171\001\002" +
    "\000\026\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\041\uffe4\045\uffe4\001\002\000\026" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\041\uffe2\045\uffe2\001\002\000\026\006\uffdf" +
    "\007\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\041\uffdf\045\uffdf\001\002\000\004\044\175\001\002" +
    "\000\026\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\041\uffe6\045\uffe6\001\002\000\004" +
    "\044\177\001\002\000\026\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\015\uffde\016\uffde\017\uffde\041\uffde\045\uffde" +
    "\001\002\000\006\024\202\044\201\001\002\000\026\006" +
    "\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\041\uffd0\045\uffd0\001\002\000\006\046\203\047" +
    "\204\001\002\000\006\010\210\044\uffcf\001\002\000\004" +
    "\044\uffcb\001\002\000\004\044\206\001\002\000\026\006" +
    "\uffca\007\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca" +
    "\017\uffca\041\uffca\045\uffca\001\002\000\004\044\214\001" +
    "\002\000\004\046\211\001\002\000\004\044\uffcd\001\002" +
    "\000\004\044\213\001\002\000\026\006\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\041\uffcc" +
    "\045\uffcc\001\002\000\026\006\uffce\007\uffce\011\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\uffce\041\uffce\045\uffce" +
    "\001\002\000\006\024\217\033\216\001\002\000\004\005" +
    "\226\001\002\000\004\005\220\001\002\000\006\005\221" +
    "\045\222\001\002\000\004\044\225\001\002\000\004\005" +
    "\223\001\002\000\004\044\224\001\002\000\026\006\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\041\uffd1\045\uffd1\001\002\000\026\006\uffd3\007\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\041" +
    "\uffd3\045\uffd3\001\002\000\006\005\227\045\230\001\002" +
    "\000\004\044\233\001\002\000\004\005\231\001\002\000" +
    "\004\044\232\001\002\000\026\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\041\uffd2\045" +
    "\uffd2\001\002\000\026\006\uffd4\007\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\015\uffd4\016\uffd4\017\uffd4\041\uffd4\045\uffd4\001" +
    "\002\000\006\035\076\045\077\001\002\000\004\037\236" +
    "\001\002\000\004\040\237\001\002\000\022\006\036\007" +
    "\025\011\033\012\032\013\026\016\030\017\041\045\042" +
    "\001\002\000\026\006\036\007\025\011\033\012\032\013" +
    "\026\015\135\016\030\017\041\041\241\045\042\001\002" +
    "\000\026\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\041\uffc1\045\uffc1\001\002\000\006" +
    "\035\076\045\077\001\002\000\004\037\244\001\002\000" +
    "\004\040\245\001\002\000\022\006\036\007\025\011\033" +
    "\012\032\013\026\016\030\017\041\045\042\001\002\000" +
    "\026\006\036\007\025\011\033\012\032\013\026\015\135" +
    "\016\030\017\041\041\247\045\042\001\002\000\030\006" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\250\015\uffc9" +
    "\016\uffc9\017\uffc9\041\uffc9\045\uffc9\001\002\000\004\040" +
    "\251\001\002\000\022\006\036\007\025\011\033\012\032" +
    "\013\026\016\030\017\041\045\042\001\002\000\026\006" +
    "\036\007\025\011\033\012\032\013\026\015\135\016\030" +
    "\017\041\041\253\045\042\001\002\000\026\006\uffc2\007" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\041\uffc2\045\uffc2\001\002\000\006\024\256\044\255\001" +
    "\002\000\026\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\041\uffdd\045\uffdd\001\002\000" +
    "\006\046\257\047\260\001\002\000\006\010\263\044\uffdc" +
    "\001\002\000\004\044\uffda\001\002\000\004\044\262\001" +
    "\002\000\026\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\041\uffd9\045\uffd9\001\002\000" +
    "\004\046\266\001\002\000\004\044\265\001\002\000\026" +
    "\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\041\uffdb\045\uffdb\001\002\000\004\044\uffd8" +
    "\001\002\000\004\044\270\001\002\000\026\006\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\041\uffd7\045\uffd7\001\002\000\004\002\ufffd\001\002\000" +
    "\004\036\273\001\002\000\004\037\274\001\002\000\004" +
    "\040\275\001\002\000\024\006\036\007\025\011\033\012" +
    "\032\013\026\016\030\017\041\041\277\045\042\001\002" +
    "\000\026\006\036\007\025\011\033\012\032\013\026\015" +
    "\135\016\030\017\041\041\300\045\042\001\002\000\004" +
    "\041\ufffb\001\002\000\004\041\ufffa\001\002\000\004\040" +
    "\302\001\002\000\010\022\016\023\014\041\303\001\002" +
    "\000\004\002\000\001\002\000\004\041\305\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\036\004\030\006\034" +
    "\007\033\010\023\012\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\132\006\135\007\133\010\130\011\137\012" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\122\001\001\000\002" +
    "\001\001\000\004\005\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\127\004\030\006\034\007\033" +
    "\010\023\012\026\001\001\000\016\004\132\006\135\007" +
    "\133\010\130\011\137\012\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\140\001\001\000\002\001\001\000\016\003\142\004" +
    "\030\006\034\007\033\010\023\012\026\001\001\000\016" +
    "\004\132\006\135\007\133\010\130\011\137\012\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\164\001\001\000\004\021\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\206\001\001\000\004\030\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\237\004\030\006" +
    "\034\007\033\010\023\012\026\001\001\000\016\004\132" +
    "\006\135\007\133\010\130\011\137\012\131\001\001\000" +
    "\002\001\001\000\004\013\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\245\004\030\006\034\007" +
    "\033\010\023\012\026\001\001\000\016\004\132\006\135" +
    "\007\133\010\130\011\137\012\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\251\004\030\006\034" +
    "\007\033\010\023\012\026\001\001\000\016\004\132\006" +
    "\135\007\133\010\130\011\137\012\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\263\001\001\000\004\023\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\275\004\030\006\034\007\033\010\023\012\026\001" +
    "\001\000\016\004\132\006\135\007\133\010\130\011\137" +
    "\012\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    TablaSimbolos ta = new TablaSimbolos();  
    Object entero=null;
    Palabra simbolo;
    TablaIntermedio codigoIntermedio=new TablaIntermedio();
    int temp = 1;
   


  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Char Identificador Igual Caracter NT$10 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$10 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
   
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            ta.setValor(i3.toString(), e3.toString());        
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Char Identificador Igual Numero Punto Numero NT$9 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$9 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
   
            RESULT=i3.toString();
            String nume=e3.toString()+"."+e2.toString();
                   ta.verificarVariableInde(i3.toString(),"char",nume,ta); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Char Identificador Igual Numero NT$8 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
   
            RESULT=i3.toString();
            ta.verificarVariableInde(i3.toString(),"char",e3.toString(),ta);       
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Identificador Igual Numero Punto Numero NT$7 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i2.toString();
        String nume=e3.toString()+"."+e2.toString();
        Palabra simbolos = ta.busca(i2.toString());
          if (simbolos != null && simbolos.getTipo().equals("float")) {
            ta.setValor(i2.toString(), nume);
            

           } else{
              ta.probar(i2.toString(),2,simbolos.getTipo());
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Float Identificador Igual Numero Punto Numero NT$6 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i2.toString();
        String nume=e3.toString()+"."+e2.toString();
        ta.verificarVariableInde(i2.toString(),"float",nume,ta);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Float Identificador Igual Caracter NT$5 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

       RESULT = i2.toString();
    String value = e3.toString();

    if (value.length() == 3 && value.startsWith("'") && value.endsWith("'")) {
        char c = value.charAt(1);
        if (Character.isDigit(c)) {
            ta.verificarVariableInde(i2.toString(), "float", value, ta);
        } else {
            ta.probar(value, 2, "char");
        }
    } else {
        ta.probar(value, 2, "char");
    }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Float Identificador Igual Numero NT$4 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        RESULT=i2.toString();
        ta.verificarVariableInde(i2.toString(),"float",e3.toString()+".0",ta);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
           String  tipoTemporal = "float";
            RESULT=i2.toString();
            ta.crearEntradada(i2.toString(),tipoTemporal);
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador Igual Caracter NT$3 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            RESULT=i1.toString();
            ta.verificarVariableInde(i1.toString(),"integer",e1.toString(),ta);          
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador Igual Numero NT$2 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            RESULT=i1.toString();
            ta.verificarVariableInde(i1.toString(),"integer",e1.toString(),ta);    
            codigoIntermedio.crearEntrada(new Quadruple("=",i1.toString(),e1.toString(), ""));
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Int Identificador Igual Numero Punto Numero NT$1 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

             RESULT=i2.toString();
             String nume=e3.toString()+"."+e2.toString();
             Palabra simbolo = ta.busca(i2.toString());
             ta.verificarVariableInde(i2.toString(),"integer",nume,ta);      
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    String varA = i2.toString();
    String varB = i3.toString();
    Palabra simboloA = ta.busca(varA);
    Palabra simboloB = ta.busca(varB);
    String tempResult = "temp" + temp;  // Use temp variable

    if (simboloA == null || simboloB == null) {
        ta.probar(null,3,null,varA,varB);
    } else if (!simboloA.getTipo().equals(simboloB.getTipo())) {
        ta.probar(null,4,null,varA,varB);
    } else {
        RESULT = i1.toString();

        // First create the quadruple for the addition
        codigoIntermedio.crearEntrada(new Quadruple("-", tempResult, varA, varB));
        temp += 1;  // Increment temp

        // Then create the quadruple for the result assignment
        codigoIntermedio.crearEntrada(new Quadruple("=", i1.toString(), tempResult, ""));
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    String varA = i2.toString();
    String varB = i3.toString();
    Palabra simboloA = ta.busca(varA);
    Palabra simboloB = ta.busca(varB);
    String tempResult = "temp" + temp;  // Use temp variable

    if (simboloA == null || simboloB == null) {
        ta.probar(null,3,null,varA,varB);
    } else if (!simboloA.getTipo().equals(simboloB.getTipo())) {
        ta.probar(null,4,null,varA,varB);
    } else {
        RESULT = i1.toString();

        // First create the quadruple for the addition
        codigoIntermedio.crearEntrada(new Quadruple("+", tempResult, varA, varB));
        temp += 1;  // Increment temp

        // Then create the quadruple for the result assignment
        codigoIntermedio.crearEntrada(new Quadruple("=", i1.toString(), tempResult, ""));
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Palabra simbolo1 = ta.busca(i1.toString());
        Palabra simbolo2 = ta.busca(i2.toString());
        RESULT = i1.toString();
            if (simbolo2 == null) {
                ta.probar(i2.toString(), 1, null);
            } else {
            if (simbolo1 != null) {
                if (simbolo2.getTipo().equals(simbolo1.getTipo())) {
                    ta.setValor(i1.toString(), simbolo2.getValor());
                 } else {
                    ta.probar(i1.toString(), 4, null, i1.toString(), i2.toString());
                 }
                } else {
                    ta.probar(i1.toString(), 1, null);
                }
            }
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Identificador Igual Caracter P_coma 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
          simbolo = ta.busca(i2.toString());
            RESULT=i2.toString();
            if (simbolo != null && simbolo.getTipo().equals("char")) {
                ta.verificarVariableDef(i2.toString(),"char",e3.toString(),ta);
            } else {
                if (simbolo == null) {
                    ta.probar(i2.toString(), 1, null);
                } else {
                     ta.probar(i2.toString(), 2, simbolo.getTipo());
                }
           }          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Identificador Igual Numero NT$0 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

            simbolo = ta.busca(i1.toString());
            RESULT=i1.toString();
            if (simbolo != null && simbolo.getTipo().equals("integer")) {
                 ta.verificarVariableDef(i1.toString(),"integer",e1.toString(),ta);

                 codigoIntermedio.setValor(i1.toString(),"=",i1.toString(),e1.toString(),"");
           
            } else {
                if (simbolo == null) {
                    ta.probar(i1.toString(), 1, null);
                } else {
                    ta.probar(i1.toString(), 2, simbolo.getTipo());
                }
             }  
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            RESULT=i1.toString();
            String  tipoTemporal = "integer";
                ta.crearEntradada(i1.toString(), tipoTemporal);
                codigoIntermedio.crearEntrada(new Quadruple("",i1.toString(), "", ""));
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Publico Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Publico Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

