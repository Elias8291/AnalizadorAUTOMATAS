package codigo;

import java_cup.runtime.Symbol;
    
action code{:
    TablaSimbolos ta = new TablaSimbolos();   
    Palabra simbolo;
    
:}

parser code
{: 
    private Symbol s;
    private TablaSimbolos ta ;
    public void syntax_error(Symbol s){
        this.s = s;
    }


    public Symbol getS(){
        return this.s;
}


:};

 terminal Linea, Comillas, Int, Float, Punto, Char, Cadena, If, Else, Do, While, For, Main, Clase, Publico, Void,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, P_coma, Identificador,
    Numero, Caracter, ERROR;
terminal Integer INTEGER;
terminal Float DECIMAL;
terminal Character CHARACTER;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, METODO;

start with INICIO;

INICIO ::= 
    Clase Identificador Llave_a  Llave_c |
    Publico Clase Identificador Llave_a  Llave_c |
    Clase Identificador Llave_a METODO  Llave_c |
    Publico Clase Identificador Llave_a METODO Llave_c 
;

METODO ::=
    Publico Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c |
    Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Publico Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    Int Identificador:i1 P_coma {:
            RESULT=i1.toString();
            String  tipoTemporal = "integer";
            ta.crearEntradada(i1.toString(), tipoTemporal);
            :} | 
    Identificador:i1 Igual Numero:e1 {:
            simbolo = ta.busca(i1.toString());
            RESULT=i1.toString();
            if (simbolo != null && simbolo.getTipo().equals("integer")) {
                 ta.verificarVariableDef(i1.toString(),"integer",e1.toString(),ta);
            } else {
                if (simbolo == null) {
                    ta.probar(i1.toString(), 1, null);
                } else {
                    ta.probar(i1.toString(), 2, simbolo.getTipo());
                }
             }  
            :} P_coma|

    Identificador:i2 Igual Caracter:e3 P_coma{:
          simbolo = ta.busca(i2.toString());
            RESULT=i2.toString();
            if (simbolo != null && simbolo.getTipo().equals("char")) {
                ta.verificarVariableDef(i2.toString(),"char",e3.toString(),ta);
            } else {
                if (simbolo == null) {
                    ta.probar(i2.toString(), 1, null);
                } else {
                     ta.probar(i2.toString(), 2, simbolo.getTipo());
                }
           }          
    :}|
     Identificador:i1 Igual Identificador:i2 P_coma {:
        Palabra simbolo1 = ta.busca(i1.toString());
        Palabra simbolo2 = ta.busca(i2.toString());
        RESULT = i1.toString();
            if (simbolo2 == null) {
                ta.probar(i2.toString(), 1, null);
            } else {
            if (simbolo1 != null) {
                if (simbolo2.getTipo().equals(simbolo1.getTipo())) {
                    ta.setValor(i1.toString(), simbolo2.getValor());
                 } else {
                    ta.probar(i1.toString(), 4, null, i1.toString(), i2.toString());
                 }
                } else {
                    ta.probar(i1.toString(), 1, null);
                }
            }
        :}|

    Identificador:i1 Igual Identificador:i2 Suma Identificador:i3 P_coma{:
     String varA = i2.toString();
     String varB = i3.toString();
     Palabra simboloA = ta.busca(varA);
     Palabra simboloB = ta.busca(varB);

        if (simboloA == null || simboloB == null) {
            ta.probar(null,3,null,varA,varB);
        } else if (!simboloA.getTipo().equals(simboloB.getTipo())) {
            ta.probar(null,4,null,varA,varB);
        } else {
        RESULT = i1.toString();
        
    }


:} |
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador:i2 Igual Numero:e3 Punto Numero:e2 {:
             RESULT=i2.toString();
             String nume=e3.toString()+"."+e2.toString();
             Palabra simbolo = ta.busca(i2.toString());
             ta.verificarVariableInde(i2.toString(),"integer",nume,ta);      
             :}P_coma | 
    Int Identificador:i1 Igual Numero:e1{:
            RESULT=i1.toString();
            ta.verificarVariableInde(i1.toString(),"integer",e1.toString(),ta);          
            :} P_coma |
    Int Identificador:i1 Igual Caracter:e1{:
            RESULT=i1.toString();
            ta.verificarVariableInde(i1.toString(),"integer",e1.toString(),ta);          
            :} P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    Float Identificador:i2 P_coma{:
           String  tipoTemporal = "float";
            RESULT=i2.toString();
            ta.crearEntradada(i2.toString(),tipoTemporal);
            :}|
 
 Float Identificador:i2 Igual Numero:e3 {:
        RESULT=i2.toString();
        ta.verificarVariableInde(i2.toString(),"float",e3.toString()+".0",ta);
        :}P_coma | 

Float Identificador:i2 Igual Caracter:e3 {:
       RESULT = i2.toString();
    String value = e3.toString();

    if (value.length() == 3 && value.startsWith("'") && value.endsWith("'")) {
        char c = value.charAt(1);
        if (Character.isDigit(c)) {
            ta.verificarVariableInde(i2.toString(), "float", value, ta);
        } else {
            ta.probar(value, 2, "char");
        }
    } else {
        ta.probar(value, 2, "char");
    }
        :}P_coma | 
    Float Identificador:i2 Igual Numero:e3 Punto Numero:e2 {:
        RESULT=i2.toString();
        String nume=e3.toString()+"."+e2.toString();
        ta.verificarVariableInde(i2.toString(),"float",nume,ta);
        :}P_coma | 
    Identificador:i2 Igual Numero:e3 Punto Numero:e2 {:
        RESULT=i2.toString();
        String nume=e3.toString()+"."+e2.toString();
        Palabra simbolos = ta.busca(i2.toString());
    if (simbolos != null && simbolos.getTipo().equals("float")) {
            ta.setValor(i2.toString(), nume);
        } else{
    ta.probar(i2.toString(),2,simbolos.getTipo());

}
        :} P_coma|
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Char Identificador:i3 P_coma{:
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            :}|
    Char Identificador:i3 Igual Numero:e3{:   
            RESULT=i3.toString();
            ta.verificarVariableInde(i3.toString(),"char",e3.toString(),ta);       
            :}
         P_coma |    
 Char Identificador:i3 Igual Numero:e3 Punto Numero:e2{:   
            RESULT=i3.toString();
            String nume=e3.toString()+"."+e2.toString();
                   ta.verificarVariableInde(i3.toString(),"char",nume,ta); 
            :}
    P_coma |   
    Char Identificador:i3 Igual Caracter:e3{:   
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            ta.setValor(i3.toString(), e3.toString());        
            :}
    P_coma 
;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;