
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 17 15:48:19 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 17 15:48:19 CST 2023
  */
public class SintaC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaC() {super();}

  /** Constructor which sets the default scanner. */
  public SintaC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\007\000\002\002\010\000\002\015\012" +
    "\000\002\015\010\000\002\015\011\000\002\015\011\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\006\000" +
    "\002\004\010\000\002\004\007\000\002\016\002\000\002" +
    "\004\010\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\017\002\000\002\004\012\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\011\000" +
    "\002\004\011\000\002\004\005\000\002\020\002\000\002" +
    "\004\010\000\002\004\006\000\002\006\011\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\007\015\000" +
    "\002\010\011\000\002\011\013\000\002\012\011\000\002" +
    "\014\012\000\002\014\011\000\002\005\005\000\002\005" +
    "\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\021\004\022\005\001\002\000\004\045" +
    "\250\001\002\000\004\021\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\045\011\001" +
    "\002\000\004\040\012\001\002\000\010\022\016\023\014" +
    "\041\013\001\002\000\004\002\uffff\001\002\000\004\045" +
    "\241\001\002\000\004\041\240\001\002\000\004\023\017" +
    "\001\002\000\004\045\020\001\002\000\004\036\021\001" +
    "\002\000\004\037\022\001\002\000\004\040\023\001\002" +
    "\000\024\006\036\007\025\011\033\012\032\013\030\016" +
    "\027\017\040\041\041\045\042\001\002\000\026\006\ufff1" +
    "\007\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\041\ufff1\045\ufff1\001\002\000\004\045\230\001\002" +
    "\000\026\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\015" +
    "\uffee\016\uffee\017\uffee\041\uffee\045\uffee\001\002\000\004" +
    "\036\222\001\002\000\004\036\210\001\002\000\026\006" +
    "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\041\ufff7\045\ufff7\001\002\000\004\045\171\001" +
    "\002\000\004\045\163\001\002\000\026\006\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\041" +
    "\ufff3\045\ufff3\001\002\000\026\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\041\ufff5\045" +
    "\ufff5\001\002\000\006\034\146\045\145\001\002\000\026" +
    "\006\036\007\025\011\033\012\032\013\030\015\126\016" +
    "\027\017\040\041\144\045\042\001\002\000\004\036\057" +
    "\001\002\000\004\041\ufff9\001\002\000\004\024\043\001" +
    "\002\000\010\045\046\046\044\047\045\001\002\000\006" +
    "\010\054\044\053\001\002\000\004\044\052\001\002\000" +
    "\004\025\047\001\002\000\004\045\050\001\002\000\004" +
    "\044\051\001\002\000\026\006\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\041\uffeb\045\uffeb" +
    "\001\002\000\026\006\uffda\007\uffda\011\uffda\012\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\041\uffda\045\uffda\001\002" +
    "\000\026\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\uffec\041\uffec\045\uffec\001\002\000\004" +
    "\046\055\001\002\000\004\044\056\001\002\000\026\006" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\041\uffe2\045\uffe2\001\002\000\006\006\062\045" +
    "\061\001\002\000\004\037\120\001\002\000\004\024\112" +
    "\001\002\000\004\045\063\001\002\000\004\024\064\001" +
    "\002\000\004\046\065\001\002\000\004\044\066\001\002" +
    "\000\006\035\070\045\071\001\002\000\004\044\102\001" +
    "\002\000\006\037\uffd8\044\uffd8\001\002\000\004\032\072" +
    "\001\002\000\012\005\074\035\075\045\076\046\073\001" +
    "\002\000\006\037\uffd6\044\uffd6\001\002\000\006\005\077" +
    "\045\100\001\002\000\006\037\uffd7\044\uffd7\001\002\000" +
    "\006\037\uffd5\044\uffd5\001\002\000\006\037\uffd4\044\uffd4" +
    "\001\002\000\004\005\101\001\002\000\006\037\uffd3\044" +
    "\uffd3\001\002\000\006\034\104\045\105\001\002\000\004" +
    "\037\uffce\001\002\000\004\045\111\001\002\000\006\033" +
    "\106\034\107\001\002\000\004\046\110\001\002\000\004" +
    "\037\uffcb\001\002\000\004\037\uffcc\001\002\000\004\037" +
    "\uffca\001\002\000\004\046\113\001\002\000\004\044\114" +
    "\001\002\000\006\035\070\045\071\001\002\000\004\044" +
    "\116\001\002\000\006\034\104\045\105\001\002\000\004" +
    "\037\uffcd\001\002\000\004\040\121\001\002\000\022\006" +
    "\036\007\025\011\033\012\032\013\030\016\027\017\040" +
    "\045\042\001\002\000\026\006\036\007\025\011\033\012" +
    "\032\013\030\015\126\016\027\017\040\041\131\045\042" +
    "\001\002\000\026\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\041\ufff2\045\ufff2\001\002" +
    "\000\026\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\041\uffef\045\uffef\001\002\000\026" +
    "\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\041\ufff8\045\ufff8\001\002\000\004\040\134" +
    "\001\002\000\026\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\041\ufff4\045\ufff4\001\002" +
    "\000\026\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\041\ufff6\045\ufff6\001\002\000\026" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\041\uffcf\045\uffcf\001\002\000\004\015\126" +
    "\001\002\000\026\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\041\ufff0\045\ufff0\001\002" +
    "\000\022\006\036\007\025\011\033\012\032\013\030\016" +
    "\027\017\040\045\042\001\002\000\026\006\036\007\025" +
    "\011\033\012\032\013\030\015\126\016\027\017\040\041" +
    "\136\045\042\001\002\000\004\016\137\001\002\000\004" +
    "\036\140\001\002\000\006\035\070\045\071\001\002\000" +
    "\004\037\142\001\002\000\004\044\143\001\002\000\026" +
    "\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\041\uffd0\045\uffd0\001\002\000\004\041\ufffc" +
    "\001\002\000\012\024\154\033\151\034\153\044\152\001" +
    "\002\000\004\045\147\001\002\000\004\044\150\001\002" +
    "\000\026\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\041\uffe6\045\uffe6\001\002\000\004" +
    "\046\161\001\002\000\026\006\uffed\007\uffed\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\017\uffed\041\uffed\045\uffed" +
    "\001\002\000\004\044\160\001\002\000\004\046\155\001" +
    "\002\000\004\044\uffe9\001\002\000\004\044\157\001\002" +
    "\000\026\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\041\uffe8\045\uffe8\001\002\000\026" +
    "\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\041\uffe7\045\uffe7\001\002\000\004\044\162" +
    "\001\002\000\026\006\uffea\007\uffea\011\uffea\012\uffea\013" +
    "\uffea\015\uffea\016\uffea\017\uffea\041\uffea\045\uffea\001\002" +
    "\000\006\024\165\044\164\001\002\000\026\006\uffdd\007" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\041\uffdd\045\uffdd\001\002\000\004\047\166\001\002\000" +
    "\004\044\uffdc\001\002\000\004\044\170\001\002\000\026" +
    "\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\041\uffdb\045\uffdb\001\002\000\006\024\173" +
    "\033\172\001\002\000\004\005\202\001\002\000\004\005" +
    "\174\001\002\000\006\005\175\045\176\001\002\000\004" +
    "\044\201\001\002\000\004\005\177\001\002\000\004\044" +
    "\200\001\002\000\026\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\015\uffde\016\uffde\017\uffde\041\uffde\045\uffde\001" +
    "\002\000\026\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\041\uffe0\045\uffe0\001\002\000" +
    "\006\005\203\045\204\001\002\000\004\044\207\001\002" +
    "\000\004\005\205\001\002\000\004\044\206\001\002\000" +
    "\026\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\041\uffdf\045\uffdf\001\002\000\026\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\041\uffe1\045\uffe1\001\002\000\006\035\070\045" +
    "\071\001\002\000\004\037\212\001\002\000\004\040\213" +
    "\001\002\000\022\006\036\007\025\011\033\012\032\013" +
    "\030\016\027\017\040\045\042\001\002\000\026\006\036" +
    "\007\025\011\033\012\032\013\030\015\126\016\027\017" +
    "\040\041\215\045\042\001\002\000\030\006\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\216\015\uffd9\016\uffd9\017" +
    "\uffd9\041\uffd9\045\uffd9\001\002\000\004\040\217\001\002" +
    "\000\022\006\036\007\025\011\033\012\032\013\030\016" +
    "\027\017\040\045\042\001\002\000\026\006\036\007\025" +
    "\011\033\012\032\013\030\015\126\016\027\017\040\041" +
    "\221\045\042\001\002\000\026\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\041\uffd2\045" +
    "\uffd2\001\002\000\006\035\070\045\071\001\002\000\004" +
    "\037\224\001\002\000\004\040\225\001\002\000\022\006" +
    "\036\007\025\011\033\012\032\013\030\016\027\017\040" +
    "\045\042\001\002\000\026\006\036\007\025\011\033\012" +
    "\032\013\030\015\126\016\027\017\040\041\227\045\042" +
    "\001\002\000\026\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\041\uffd1\045\uffd1\001\002" +
    "\000\006\024\232\044\231\001\002\000\026\006\uffe5\007" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\041\uffe5\045\uffe5\001\002\000\004\046\233\001\002\000" +
    "\004\010\234\001\002\000\004\046\235\001\002\000\004" +
    "\044\uffe4\001\002\000\004\044\237\001\002\000\026\006" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\041\uffe3\045\uffe3\001\002\000\004\002\ufffd\001" +
    "\002\000\004\036\242\001\002\000\004\037\243\001\002" +
    "\000\004\040\244\001\002\000\024\006\036\007\025\011" +
    "\033\012\032\013\030\016\027\017\040\041\246\045\042" +
    "\001\002\000\026\006\036\007\025\011\033\012\032\013" +
    "\030\015\126\016\027\017\040\041\247\045\042\001\002" +
    "\000\004\041\ufffb\001\002\000\004\041\ufffa\001\002\000" +
    "\004\040\251\001\002\000\010\022\016\023\014\041\252" +
    "\001\002\000\004\002\000\001\002\000\004\041\254\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\036\004\030\006\034" +
    "\007\033\010\023\012\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\124\006\127\007\126\010\122\011\131\012" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\114\001\001\000\002\001\001" +
    "\000\004\005\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\121\004\030\006\034\007\033\010\023" +
    "\012\025\001\001\000\016\004\124\006\127\007\126\010" +
    "\122\011\131\012\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\132" +
    "\001\001\000\002\001\001\000\016\003\134\004\030\006" +
    "\034\007\033\010\023\012\025\001\001\000\016\004\124" +
    "\006\127\007\126\010\122\011\131\012\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\213\004\030\006\034" +
    "\007\033\010\023\012\025\001\001\000\016\004\124\006" +
    "\127\007\126\010\122\011\131\012\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\217\004\030\006" +
    "\034\007\033\010\023\012\025\001\001\000\016\004\124" +
    "\006\127\007\126\010\122\011\131\012\123\001\001\000" +
    "\002\001\001\000\004\013\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\225\004\030\006\034\007" +
    "\033\010\023\012\025\001\001\000\016\004\124\006\127" +
    "\007\126\010\122\011\131\012\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\244\004\030\006\034\007\033\010\023\012\025" +
    "\001\001\000\016\004\124\006\127\007\126\010\122\011" +
    "\131\012\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    private Symbol s;
    private TablaSimbolos ta ;
    public void syntax_error(Symbol s){
        this.s = s;
    }


    public Symbol getS(){
        return this.s;
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaC$actions {


    TablaSimbolos ta = new TablaSimbolos();   
    Object entero=null;
public Object getEntero() {
        return this.entero;
    }


  private final SintaC parser;

  /** Constructor */
  CUP$SintaC$actions(SintaC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaC$do_action(
    int                        CUP$SintaC$act_num,
    java_cup.runtime.lr_parser CUP$SintaC$parser,
    java.util.Stack            CUP$SintaC$stack,
    int                        CUP$SintaC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaC$result;

      /* select the action based on the action number */
      switch (CUP$SintaC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-10)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Igual Caracter P_coma 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
            RESULT=i3.toString();
         ta.setValor(i3.toString(), e3.toString());

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Char Identificador Igual Caracter NT$2 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.peek()).value;
   
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            ta.setValor(i3.toString(), e3.toString());        
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("NT$2",14, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
            RESULT=i3.toString();
            ta.crearEntradada(i3.toString(), "char");
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
        RESULT=i2.toString();
        String nume=e3.toString()+"."+e2.toString();
        ta.setValor(i2.toString(),nume);
        
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Float Identificador Igual Numero Punto Numero NT$1 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.peek()).value;

        RESULT=i2.toString();
        ta =new TablaSimbolos(); // Initialize ta here
        ta.crearEntradada(i2.toString(), "float");
        String nume=e3.toString()+"."+e2.toString();
        ta.setValor(i2.toString(),nume);
        
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
            RESULT=i2.toString();
            ta.crearEntradada(i2.toString(), "float");
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Igual Numero NT$0 P_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.peek()).value;

            RESULT=i1.toString();
            ta.crearEntradada(i1.toString(), "integer");
            ta.setValor(i1.toString(), e1.toString());
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
            entero=e1;
            RESULT=i1.toString();
            ta.setValor(i1.toString(), e1.toString());
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		
            RESULT=i1.toString();
            ta.crearEntradada(i1.toString(), "integer");
            
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= Void Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= Publico Void Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Publico Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Clase Identificador Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Publico Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Clase Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          return CUP$SintaC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)).value;
		RESULT = start_val;
              CUP$SintaC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaC$stack.elementAt(CUP$SintaC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaC$parser.done_parsing();
          return CUP$SintaC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

